package dk.ku.di.dms.vms.event.redis;

// import com.google.gson.Gson;

import java.util.List;
import java.util.Map;

import dk.ku.di.dms.vms.event.Event;
import dk.ku.di.dms.vms.event.EventHandler;
import dk.ku.di.dms.vms.event.EventRepository;
import redis.clients.jedis.Jedis;

/**
** https://www.javacodegeeks.com/2014/01/simple-message-queue-using-redis.html
 * TODO in the future, we may employ ML approaches to adjust the rate of consumption
 */

public class RedisEventHandler extends EventHandler<RedisEvent> {

    final private Jedis jedis;
    // final private Gson gson;

    public RedisEventHandler(EventRepository eventRepository,
                             final Map<Event,String> fromOutputEventToQueueMap){
        super(eventRepository,fromOutputEventToQueueMap);
        this.jedis = new Jedis("localhost");
        // this.gson = new Gson();
    }

    @Override
    protected void dequeue() {

        List<String> messages = null;

        System.out.println("Waiting for a message in the queue");

        // TODO remove queue, insert the events defined by the application
        messages = jedis.blpop(0,"queue");
        System.out.println("Got the message");
        System.out.println("KEY:" + messages.get(0) + " VALUE:" + messages.get(1));
        String payload = messages.get(1);
        //Do some processing with the payload
        System.out.println("Message received:" + payload);

        for(String s : messages){

            // TODO the message key identifies the event properties, such as
            // the transaction id, the event type (and associated payload type)

            // mapping of key to create event
            // I need a map of application events


            // inputQueue.add( s );
        }




    }

    // https://mkyong.com/java/how-do-convert-java-object-to-from-json-format-gson-api/
    @Override
    protected void queue(Event event, String queue) {
        // String jsonInString = gson.toJson(event);
        String jsonInString = event.toString();
        jedis.rpush(queue, jsonInString);
    }


}
